// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]

  @@map("brand")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]

  @@map("category")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  photo       String?
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  Int
  brandId     Int
  freeShipping Boolean  @default(false)
  category    Category @relation(fields: [categoryId], references: [id])
  brand       Brand    @relation(fields: [brandId], references: [id])
  orders      Order[]
  stock       Stock?

  @@map("product")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  cpf       String   @unique
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sale      Sale[]

  @@map("user")
}

model Sale {
  id                 Int           @id @default(autoincrement())
  userId             Int
  status             SaleStatus    @default(PENDING)
  paymentMethod      PaymentMethod?
  totalValue         Decimal       @db.Decimal(10, 2)
  shippingAddress    String
  stripeCheckoutId   String?       @unique  // Stripe Checkout Session ID
  stripePaymentId    String?       @unique  // Stripe Payment Intent ID
  pixQrCode          String?       // QR Code do PIX (se for PIX)
  pixExpiresAt       DateTime?     // Validade do PIX
  boletoUrl          String?       // URL do boleto (se for boleto)
  boletoBarcode      String?       // CÃ³digo de barras do boleto
  boletoExpiresAt    DateTime?     // Validade do boleto
  paidAt             DateTime?     // Data/hora do pagamento
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id])
  orders             Order[]

  @@map("sale")
}

model Order {
  id         Int      @id @default(autoincrement())
  saleId     Int
  productId  Int
  quantity   Int
  priceUnit  Decimal  @db.Decimal(10, 2)
  subtotal   Decimal  @db.Decimal(10, 2) // quantity * priceUnit
  createdAt  DateTime @default(now())
  sale       Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])

  @@map("order")
}

model Stock {
  id        Int      @id @map("productId")
  quantity  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  product   Product  @relation(fields: [id], references: [id])

  @@map("stock")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum SaleStatus {
  PENDING
  PROCESSING
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PIX
  BOLETO
}